'use strict';

const express = require('express');
const router = express.Router();

const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');


//    Uses middleware (BasicAuthentication) to validate the user
const basicAuth = require('./middleware/basic.js');
const oauth = require('./middleware/oauth.js');

let User = require('../auth/models/users-model.js');
let secret = process.env.SECRET;


// Add a new /oauth route to the auth router
router.get('oauth', oauth, (req, res) => {
  res.status(200).send(req.token);
});


// Create a POST route for /signup
//    Accepts either a JSON object or FORM Data with the keys “username” and “password”
router.post('/signup', async (req, res, next) => {

  const user = await User.create(req.body);
  const token = user.generateToken();

  const responseBody = {
    token, 
    user,
  };

  res.send(responseBody);

});

// Create a POST route for /signin
//    router.post('/signin', basicAuth, (req,res) => {});
router.post('/signin', basicAuth, (req, res, next) => {


  // Additionally, set a Cookie and a Token header on the response, with the token as the value
  res.cookie('auth', req.token);
  //    When validated, send a JSON object as the response with the following properties:
  //       token: The token generated by the users model
  //       user: The users’ database record
  res.send({
    token: req.token,
    user: req.user,
  });

});


// Create a GET route for /users that returns a JSON object with all users

router.get('/users', (req, res) => {
  // res.status(200).json(User);
  res.status(200).send(req.token);
});

// Stretch Goal: have this route also use the middleware for authentication so that you cannot see the user list without a valid username and password

module.exports = router;